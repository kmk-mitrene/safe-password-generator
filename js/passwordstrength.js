function passwordStrengthFromString(password) {
    
}


function passwordStrengthFromSetup(useUppercaseLetters, useLowercaseLetter, useNumbers, useSymbols, passwordLength) {

    
}





function detectSymbolSets(params) {
    
    
}


function entropyPerPassword(possibleSymbols, symbolsInPassword) {    
   var entropyPerPassword = Math.ceil(symbolsInPassword * Math.log2(possibleSymbols))
    
    console.log(entropyPerPassword)

    return entropyPerPassword;
}



//calculateEntropyPerSymbol();
/* 
H=\log _{2}N^{L}=L\log _{2}N=L{\log N \over \log 2}

where N is the number of possible symbols and L is the number of symbols in the password. H is measured in bits.[4][10] In the last expression, log can be to any base. 



For passwords generated by a process that randomly selects a string of symbols of length, L, from a set of N possible symbols, 
the number of possible passwords can be found by raising the number of symbols to the power L, i.e. NL. 
Increasing either L or N will strengthen the generated password. 
The strength of a random password as measured by the information entropy is just 
the base-2 logarithm or log2 of the number of possible passwords, assuming each 
symbol in the password is produced independently. Thus a random password's information entropy, 
H, is given by the formula:  */